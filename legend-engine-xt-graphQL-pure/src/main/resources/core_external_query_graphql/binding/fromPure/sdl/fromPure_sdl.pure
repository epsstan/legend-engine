import meta::external::query::graphQL::binding::fromPure::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::typeSystem::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::pure::model::unit::*;
import meta::pure::functions::math::divide::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::path::*;
import meta::pure::router::clustering::*;
import meta::pure::router::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::runtime::*;

Class meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer extends meta::external::shared::format::metamodel::SchemaDetail
{
  document : meta::external::query::graphQL::metamodel::sdl::Document[1];
}

Class meta::external::query::graphQL::binding::fromPure::sdl::ModelToGraphQLConfig extends meta::external::shared::format::transformation::fromPure::ModelToSchemaConfiguration
{
}

function meta::external::query::graphQL::binding::fromPure::sdl::pureToGraphQLSDL(modelUnit: ModelUnit[1], config: ModelToGraphQLConfig[1]): meta::external::shared::format::metamodel::SchemaSet[1]
{
  let packageableElements = $modelUnit->resolve().packageableElements;
  let document = 
  ^meta::external::query::graphQL::metamodel::sdl::Document
  (
    definitions = meta::external::query::graphQL::binding::fromPure::sdl::transformPureToGraphQLSDL($packageableElements)
  );
  let sdlcContainer = 
  ^meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer
  (
    document = $document
  );
  let schemaSetSepPos  = $config.targetSchemaSet->lastIndexOf('::');
  let schemaSetPkgName = $config.targetSchemaSet->substring(0, $schemaSetSepPos);
  let schemaSet = ^meta::external::shared::format::metamodel::SchemaSet(
      package = pathToPackage($schemaSetPkgName, true),
      name    = $config.targetSchemaSet->substring($schemaSetSepPos+2),
      format  = meta::external::query::graphQL::contract::graphQLSdlContractID()
   );
  let schema = 
  ^meta::external::shared::format::metamodel::Schema(
    set = $schemaSet,
    location = 'types.graphql',
    detail = $sdlcContainer
   );
  ^$schemaSet(
    schemas = $schema
   );
  $schemaSet;
}

function meta::external::query::graphQL::binding::fromPure::sdl::schemaDetailToString(schemaDetail: meta::external::query::graphQL::metamodel::sdl::GraphQLSDLContainer[1]): String[1]
{
  $schemaDetail.document.definitions
                  ->map(x|$x->meta::external::query::graphQL::serialization::graphQLtoString())
                  ->joinStrings('\n');
}


function meta::external::query::graphQL::binding::fromPure::sdl::isClass( rawType:meta::pure::metamodel::type::Type[*] ) : Boolean[1]
{
   let type = $rawType->toOne();
   $type->match([
      p:PrimitiveType[1]    | false,
      e:Enumeration<Any>[1] | false,
      c:Class<Any>[1]       | true
   ]);
}

function meta::external::query::graphQL::binding::fromPure::sdl::processQueryType(queryType:Class<Any>[1]):Class<Any>[*]
{
  let qualifiedProps = $queryType->allProperties()->filter(p | $p->instanceOf(QualifiedProperty));
  $qualifiedProps->map(p|
    $p->functionType().parameters->evaluateAndDeactivate()->tail()->map(qp| 
      if ($qp.genericType.rawType->isClass(),|$qp.genericType.rawType->cast(@Class<Any>), |[])
    );
  );
}

function meta::external::query::graphQL::binding::fromPure::sdl::detectGQLInputTypes(queryTypes:Class<Any>[*]):Class<Any>[*]
{
  $queryTypes->map(q| $q->processQueryType());
}

function meta::external::query::graphQL::binding::fromPure::sdl::transformPureToGraphQLSDL(types:meta::pure::metamodel::PackageableElement[*]):meta::external::query::graphQL::metamodel::sdl::typeSystem::TypeSystemDefinition[*]
{
  let allTypes = $types->findTypes();

  let query = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Query'))->map(x|^RootOperationTypeDefinition(operationType = OperationType.query, type = $x->cast(@Class<Any>).name->toOne()));
  let mutation = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Mutation'))->map(x|^RootOperationTypeDefinition(operationType = OperationType.mutation, type = $x->cast(@Class<Any>).name->toOne()));
  let subscription = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Subscription'))->map(x|^RootOperationTypeDefinition(operationType = OperationType.subscription, type = $x->cast(@Class<Any>).name->toOne()));

  let queryTypes = $allTypes->cast(@AnnotatedElement)->filter(t|$t.stereotypes.value->contains('Query'))->map(x|$x->cast(@Class<Any>));

  let inputTypeClasses = detectGQLInputTypes($queryTypes);

  if ($inputTypeClasses->size() > 0, | print('Detected ' + $inputTypeClasses->size()->toString() + ' GQL input types'), | print('No GQL input types'));

  $allTypes->map(c|
    $c->match(
      [
        c:Class<Any>[1] |
            ^ObjectTypeDefinition(
              name = $c.name->toOne(),
              fields = $c->allProperties()->map(p|
                                      ^FieldDefinition
                                      (
                                        name = $p.name->toOne(),
                                        type = buildType($p->functionReturnType(), $p->functionReturnMultiplicity()),
                                        argumentDefinitions = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(pa|
                                                                    ^InputValueDefinition
                                                                    (
                                                                      name=$pa.name,
                                                                      type=buildType($pa.genericType, $pa.multiplicity)
                                                                    )
                                                                ),
                                                    |[]
                                               )
                                        )
                                      
                                      )
            ),
        e:Enumeration<Any>[1] |
            ^EnumTypeDefinition(
              name = $c.name->toOne(),
              values = $e->enumValues()->map(z|^EnumValueDefinition(value=$z->id()))
            )
      ]
    );
  )->meta::pure::functions::collection::sortBy(t|$t->match([o:ObjectTypeDefinition[1]|$o.name,e:EnumTypeDefinition[1]|$e.name])->toOne())
  ->concatenate(
    if($query->concatenate($mutation)->concatenate($subscription)->isNotEmpty(),
    |^SchemaDefinition
    (
      rootOperationTypeDefinitions = $query->concatenate($mutation)->concatenate($subscription)
    ),
    |[])
  );
}

function <<access.private>> meta::external::query::graphQL::binding::fromPure::sdl::buildType(type:meta::pure::metamodel::type::generics::GenericType[1], mul:Multiplicity[1]):TypeReference[1]
{
  let primitives = [
    pair(String, 'String'),
    pair(Integer, 'Int'),
    pair(Float, 'Float'),
    pair(Boolean, 'Boolean')
  ]->newMap();

  let name = $primitives->get($type.rawType->toOne());
  let fName = if ($name->isEmpty(),|$type.rawType.name->toOne(),|$name->toOne());

  if ($mul == ZeroOne,
    | ^NamedTypeReference(name = $fName, nullable=true),
    | if ($mul == PureOne,
      | ^NamedTypeReference(name = $fName, nullable=false),
      | ^ListTypeReference(itemType=^NamedTypeReference(name = $fName, nullable=false), nullable=false)
    )
  );
}

function meta::external::query::graphQL::binding::fromPure::sdl::findTypes(pElems:meta::pure::metamodel::PackageableElement[*]):meta::pure::metamodel::type::Type[*]
{
  $pElems
    ->filter(i|$i->instanceOf(meta::pure::metamodel::type::Type))
    ->cast(@meta::pure::metamodel::type::Type)
    ->removeDuplicates()
}

