// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::pure::extension::*;
import meta::pure::functions::collection::*;
import meta::pure::runtime::connection::authentication::*;
import meta::protocols::pure::vX_X_X::extension::runtime::connection::authentication::*;

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::authentication::transformAuthenticationSpec(a:meta::pure::runtime::connection::authentication::AuthenticationSpec[1], extensions:Extension[*]):meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::AuthenticationSpec[1]
{
   $a->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('authenticationSpec')->cast(@meta::protocols::pure::vX_X_X::extension::runtime::connection::authentication::AuthenticationModuleSerializerExtension).transfers_authentication_transformAuthenticationSpec->concatenate([
      o:meta::pure::runtime::connection::authentication::OauthAuthenticationSpec [1] |
        ^meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::OauthAuthenticationSpec(
            _type = 'oauth',
            grantType = $o.grantType->toString(),
            clientId = $o.clientId,
            clientSecretVaultReference = $o.clientSecretVaultReference,
            authServerUrl = $o.authServerUrl,
            scopes = $o.scopes
        ),
      u:meta::pure::runtime::connection::authentication::UsernamePasswordAuthenticationSpec [1] |
                ^meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::UsernamePasswordAuthenticationSpec(
                    _type = 'usernamePassword',
                    username = $u.username,
                    password = ^meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::CredentialVault(
                                           _type = 'vault',
                                           vaultReference = $u.password.vaultReference
                                           )
                ),
      a:meta::pure::runtime::connection::authentication::ApiKeyAuthenticationSpec [1] |
                ^meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::ApiKeyAuthenticationSpec(
                      _type = 'apiKey',
                      location = $a.location->toString(),
                      keyName = $a.keyName,
                      value = $a.value
                ),
      other: meta::pure::runtime::connection::authentication::AuthenticationSpec[1] |
               fail('Unsupported AuthenticationSpec');
               ^meta::protocols::pure::vX_X_X::metamodel::runtime::connection::authentication::AuthenticationSpec(
                      _type = 'unknown'
                );
   ])->toOneMany())
}