
import meta::pure::functions::collection::*;
import meta::pure::lineage::scanRelations::*;
import meta::pure::lineage::scanRelations::*;
import meta::pure::router::extension::*;
import meta::relational::metamodel::join::*;
import meta::relational::functions::database::*;
import meta::pure::graphFetch::execution::*;
import meta::relational::tests::model::simple::*;
import meta::relational::authz::assert::*;


function meta::relational::authz::test::evalAuthzForUser(
      user:meta::relational::authz::User[1], 
      dataMd:Map<String, Map<String, Integer>>[1],
      scanDetails:meta::pure::lineage::scanRelations::ScanDetails[1]
):meta::relational::authz::AuthzResults[1]
{
  println('+ Authz tree for user = ' + $user.userName);
  let result = meta::relational::authz::visit($scanDetails.propertyTree, $user, $dataMd);
  println('+ Authz result = ' + $result->toString());
  $result;
}

function meta::relational::authz::test::query2():ScanDetails[1]
{
   let query = {|meta::relational::tests::model::simple::Firm.all()-> filter(f | $f.employees->exists(e | $e.age > 2))
                                                                  ->project([f|$f.legalName,
                                                                           f|$f.employees.firstName,
                                                                           f|$f.employees.lastName],
                                                                          ['Firm Name','Employee First Name','Employee Last Name'])};
   let mapping = meta::relational::tests::caseSentitiveMapping;

   meta::pure::lineage::scanRelations::scanRelationsHelper($query, $mapping, defaultRelationalExtensions())-> toOne();   
}


function meta::relational::authz::test::buildDataMetadata():Map<String, Map<String, Integer>>[1]
{
  newMap(
    [
      pair('Person', newMap([pair('data-classification', 1)])),
      pair('Person.firstName', newMap([pair('data-classification', 2)])),
      pair('Person.lastName', newMap([pair('data-classification', 2)])),
      pair('Person.age', newMap([pair('data-classification', 6)]))
    ]
  );
}

function meta::relational::authz::test::testcase_tdsProject():ScanDetails[1]
{
   let query = {|
    meta::relational::tests::model::simple::Firm.all()
      ->project(
        [
            f|$f.legalName,
            f|$f.employees.firstName,
            f|$f.employees.lastName,
            f|$f.employees.age
        ],
        ['Firm Name','Employee First Name','Employee Last Name', 'Employee Age']
      )
  };
  let mapping = meta::relational::tests::caseSentitiveMapping;
  meta::pure::lineage::scanRelations::scanRelationsHelper($query, $mapping, defaultRelationalExtensions())-> toOne();   
}

function meta::relational::authz::test::testCase1():Any[1]
{
  //println(meta::relational::authz::printAsString($aliceResults));

  // Alice does not have authz over the full tree
  let alice = ^meta::relational::authz::User(name='alice', userName='alice', dataClassification=1);
  let aliceResults = meta::relational::authz::test::evalAuthzForUser($alice, meta::relational::authz::test::buildDataMetadata(), meta::relational::authz::test::testcase_tdsProject());

  $aliceResults
    ->assertUnAuthorized()
    ->assertAuthorized('Firm', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.legalName', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.employees', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertUnAuthorized('Person.firstName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.lastName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.age', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 6]');  

  // Charlie has authz over the full tree
  let charlie = ^meta::relational::authz::User(name='charlie', userName='charlie', dataClassification=7);
  let charlieResults = meta::relational::authz::test::evalAuthzForUser($charlie, meta::relational::authz::test::buildDataMetadata(), meta::relational::authz::test::testcase_tdsProject());

  $charlieResults
    ->assertAuthorized()
    ->assertAuthorized('Firm', 'Condition : [ User classification = 7 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.legalName', 'Condition : [ User classification = 7 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.employees', 'Condition : [ User classification = 7 >=  Data classifcation = 0]')
    ->assertAuthorized('Person.firstName', 'Condition : [ User classification = 7 >=  Data classifcation = 2]')
    ->assertAuthorized('Person.lastName', 'Condition : [ User classification = 7 >=  Data classifcation = 2]')
    ->assertAuthorized('Person.age', 'Condition : [ User classification = 7 >=  Data classifcation = 6]');  
  1;
}

function meta::relational::authz::test::testcase_tds_authzFailsOnFilter():ScanDetails[1]
{
   let query = {|
    meta::relational::tests::model::simple::Firm.all()
      ->filter(f | $f.employees->exists(e | $e.age > 2))
      ->project(
        [
            f|$f.legalName,
            f|$f.employees.firstName,
            f|$f.employees.lastName,
            f|$f.employees.age
        ],
        ['Firm Name','Employee First Name','Employee Last Name', 'Employee Age']
      )
  };
  let mapping = meta::relational::tests::caseSentitiveMapping;
  meta::pure::lineage::scanRelations::scanRelationsHelper($query, $mapping, defaultRelationalExtensions())-> toOne();   
}

function meta::relational::authz::test::testCase2():Any[1]
{
  // Alice does not have authz over the full tree
  let alice = ^meta::relational::authz::User(name='alice', userName='alice', dataClassification=1);
  let aliceResults = meta::relational::authz::test::evalAuthzForUser($alice, meta::relational::authz::test::buildDataMetadata(), meta::relational::authz::test::testcase_tds_authzFailsOnFilter());

  $aliceResults
    ->assertUnAuthorized()
    ->assertAuthorized('Firm', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.legalName', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.employees', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertUnAuthorized('Person.firstName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.lastName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.age', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 6]');  
  1;
}

function meta::relational::authz::test::testcase_tds_authzFailsOnAggregate():ScanDetails[1]
{
   let query = {|
    meta::relational::tests::model::simple::Firm.all()
      ->project(
        [
            f|$f.legalName,
            f|$f.employees.age->sum()
        ],
        ['Firm Name', 'Employee Age']
      )
  };
  let mapping = meta::relational::tests::caseSentitiveMapping;
  meta::pure::lineage::scanRelations::scanRelationsHelper($query, $mapping, defaultRelationalExtensions())-> toOne();   
}

function meta::relational::authz::test::testCase3():Any[1]
{
  // Alice does not have authz over the full tree
  let alice = ^meta::relational::authz::User(name='alice', userName='alice', dataClassification=1);
  let aliceResults = meta::relational::authz::test::evalAuthzForUser($alice, meta::relational::authz::test::buildDataMetadata(), meta::relational::authz::test::testcase_tds_authzFailsOnAggregate());

  $aliceResults
    ->assertUnAuthorized()
    ->assertAuthorized('Firm', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.legalName', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.employees', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertUnAuthorized('Person.age', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 6]');  
  1;
}

function meta::relational::authz::test::testcase_graphFetch():ScanDetails[1]
{
   let tree = #{
     Firm {
       legalName,
       employees {
         firstName,
         lastName,
         age
       }
     }
   }#;
   let query = {|
    meta::relational::tests::model::simple::Firm.all()->graphFetchChecked($tree)->serialize($tree)};
  let mapping = meta::relational::tests::caseSentitiveMapping;
  meta::pure::lineage::scanRelations::scanRelationsHelper($query, $mapping, defaultRelationalExtensions())-> toOne();   
}

function meta::relational::authz::test::testCase4():Any[1]
{
  //println(meta::relational::authz::printAsString($aliceResults));

  // Alice does not have authz over the full tree
  let alice = ^meta::relational::authz::User(name='alice', userName='alice', dataClassification=1);
  let aliceResults = meta::relational::authz::test::evalAuthzForUser($alice, meta::relational::authz::test::buildDataMetadata(), meta::relational::authz::test::testcase_graphFetch());

  $aliceResults
    ->assertUnAuthorized()
    ->assertAuthorized('Firm', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.legalName', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertAuthorized('Firm.employees', 'Condition : [ User classification = 1 >=  Data classifcation = 0]')
    ->assertUnAuthorized('Person.firstName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.lastName', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 2]')
    ->assertUnAuthorized('Person.age', 'Failed Condition : [ User classification = 1 >=  Data classifcation = 6]');  
  1;
}