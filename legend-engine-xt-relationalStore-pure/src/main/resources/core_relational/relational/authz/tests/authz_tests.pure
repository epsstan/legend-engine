
import meta::pure::functions::collection::*;

function meta::relational::authz::test::evalAuthzForUser(
      user:meta::relational::authz::User[1], 
      dataMd:Map<String, Map<String, Integer>>[1],
      scanDetails:meta::pure::lineage::scanRelations::ScanDetails[1]
):Boolean[1]
{
  println('+ Authz tree for user = ' + $user.userName);
  let result = meta::relational::authz::visit($scanDetails.propertyTree, $user, $dataMd);
  println('+ Authz result = ' + $result->toString());
  $result;
}

function meta::relational::authz::test::buildDataMetadata():Map<String, Map<String, Integer>>[1]
{
  newMap(
    [
      pair('Person', newMap([pair('data-classification', 1)])),
      pair('Person.firstName', newMap([pair('data-classification', 2)])),
      pair('Person.lastName', newMap([pair('data-classification', 2)])),
      pair('Person.age', newMap([pair('data-classification', 6)]))
    ]
  );
}

function meta::relational::authz::test::authzDemo():Any[1]
{
  let alice = ^meta::relational::authz::User(name='alice', userName='alice', dataClassification=1);
  assertFalse(meta::relational::authz::test::evalAuthzForUser($alice, meta::relational::authz::test::buildDataMetadata(), meta::pure::lineage::scanRelations::test::query1()));

  let bob = ^meta::relational::authz::User(name='bob', userName='bob', dataClassification=2);
  assertFalse(meta::relational::authz::test::evalAuthzForUser($bob, meta::relational::authz::test::buildDataMetadata(), meta::pure::lineage::scanRelations::test::query1()));

  let charlie = ^meta::relational::authz::User(name='charlie', userName='charlie', dataClassification=7);
  assert(meta::relational::authz::test::evalAuthzForUser($charlie, meta::relational::authz::test::buildDataMetadata(), meta::pure::lineage::scanRelations::test::query1()));

  meta::relational::authz::test::evalAuthzForUser($charlie, meta::relational::authz::test::buildDataMetadata(), meta::pure::lineage::scanRelations::test::query2());
}

